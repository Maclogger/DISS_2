@using DISS_2.BackEnd
@using DISS_2.BackEnd.Core
@rendermode InteractiveServer
@implements ISimDelegate;

<div class="card rounded-3 bg-dark text-white p-4">
    <h1>@Headline</h1>
    <div class="row">
        <div class="col-6">
            <div class="d-flex">
                <div class="card rounded-3 bg-white p-2 d-flex align-items-center justify-content-center p-3">
                    <h4 class="text-center m-0">@_simTime</h4>
                </div>
                <button class="btn btn-primary ms-4"
                        style="width: 6rem;"
                        @onclick="RunSimulationImpl"
                        disabled="@Simulation.IsRunning">
                    Start
                </button>
                <button class="btn btn-danger ms-4"
                        style="width: 6rem;"
                        @onclick="FinishSimulation"
                        disabled="@CouldNotBeFinished()">
                    Finish
                </button>
            </div>
            <div class="card rounded-3 bg-white p-2 mt-4">
                @*
                <SpeedControlComp SimCore="Simulation" />
                *@
                <Slider SimCore="Simulation"/>
            </div>
            <div class="card rounded-3 bg-white p-2 mt-4">
                @ChildContent
            </div>
        </div>
        <div class="col-3 pb-4">
            <div class="card rounded-3 bg-white p-2 mt-4 h-100">
                <h4>Event Calendar</h4>
                @foreach (Event eventVar in _eventsInCalendar)
                {
                    <div class="card rounded-3 bg-primary p-2 text-white mt-1 mb-1">
                        <p class="m-0 p-0">
                            @eventVar.ToString()
                        </p>
                    </div>
                }
            </div>
        </div>
        <div class="col-3">
            <div class="card rounded-3 bg-white p-2 mt-4">
                <h4>History</h4>
                <textarea class="form-control" readonly="readonly" rows="13">
                    @string.Join("\n", _logsCollection)
                </textarea>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public RenderFragment? ChildContent { get; set; }

    [Parameter, EditorRequired] public string Headline { get; set; } = "Simulation";

    [Parameter, EditorRequired] public Action<SimCore>? UpdateUi { get; set; }

    [Parameter, EditorRequired] public Action? InitializeSimulation { get; set; }

    [Parameter, EditorRequired] public SimCore Simulation { get; set; } = null!;

    private string _simTime = "Day 1 - 06:00:00";
    private List<Event> _eventsInCalendar = new();
    private List<string> _logsCollection = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MainApp.Instance.SimDelegates.Add(this);
            UpdateUi?.Invoke(Simulation);
            _eventsInCalendar = Simulation.Calendar.GetSortedEvents();
            _simTime = TimeHandler.ToReadableTime(Simulation.CurrentSimTime);
            InvokeAsync(StateHasChanged);
        }
    }

    void ISimDelegate.UpdateUi(SimCore simCore, Event currentEvent)
    {
        _simTime = TimeHandler.ToReadableTime(simCore.CurrentSimTime);
        UpdateUi?.Invoke(simCore);
        _eventsInCalendar = simCore.Calendar.GetSortedEvents();

        if (currentEvent is not SysEvent)
        {
            if (_logsCollection.Count >= Config.MaxLogCount)
            {
                _logsCollection.RemoveAt(0);
            }

            _logsCollection.Add(currentEvent.ToString());
        }

        InvokeAsync(StateHasChanged);
    }

    async Task RunSimulationImpl()
    {
        _logsCollection.Clear();
        InitializeSimulation!();
        await Simulation.RunOneSimulation();
        await InvokeAsync(StateHasChanged);
    }

    private void FinishSimulation()
    {
        Simulation.FinishSimulation();
        StateHasChanged();
    }

    private bool CouldNotBeFinished()
    {
        return !Simulation.IsRunning;
    }

}