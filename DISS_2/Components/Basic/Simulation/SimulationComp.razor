@using DISS_2.BackEnd
@using DISS_2.BackEnd.Core
@using DISS_2.BackEnd.Statistics
@rendermode InteractiveServer
@implements ISimDelegate;

<div class="card rounded-3 bg-dark text-white p-4 w-100">
    <div class="container-fluid w-100">
        <div class="row">
            <h1 class="mb-4">@Headline</h1>
        </div>
        <div class="row">
            <div class="col-9 p-0">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-8 p-0 pe-4 d-flex flex-column">
                            <div class="d-flex">
                                <div class="card rounded-3 bg-white p-2 d-flex align-items-center justify-content-center p-3">
                                    <h4 class="text-center m-0">@_simTime</h4>
                                </div>
                                <button class="btn btn-primary ms-4"
                                        style="width: 6rem;"
                                        @onclick="RunSimulationImpl"
                                        disabled="@Simulation.IsRunning">
                                    Start
                                </button>
                                <button class="btn btn-danger ms-4"
                                        style="width: 6rem;"
                                        @onclick="FinishSimulation"
                                        disabled="@CouldNotBeFinished()">
                                    Finish
                                </button>
                            </div>
                            <div class="card rounded-3 bg-white mt-4 p-2 ">
                                <Slider SimCore="Simulation"/>
                            </div>
                            <div class="card rounded-3 bg-white mt-4 p-4 flex-grow-1" style="height: max-content;">
                                @ChildContent
                            </div>
                        </div>
                        <EventCalendarComp SortedEventList="_eventsInCalendar"/>
                    </div>
                    <div class="row">
                        <StatisticsComp Statistics="_statistics"/>
                    </div>
                </div>
            </div>
            <div class="col-3 p-0">
                <HistoryComp LogsCollection="_logsCollection"/>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public RenderFragment? ChildContent { get; set; }

    [Parameter, EditorRequired] public string Headline { get; set; } = "Simulation";

    [Parameter, EditorRequired] public Action<SimCore>? UpdateUi { get; set; }

    [Parameter, EditorRequired] public Action? InitializeSimulation { get; set; }

    [Parameter, EditorRequired] public SimCore Simulation { get; set; } = null!;

    private string _simTime = "Day 1 - 06:00:00";
    private List<Event> _eventsInCalendar = new();
    private List<string> _logsCollection = new();
    private List<Statistics> _statistics = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MainApp.Instance.SimDelegates.Add(this);
            UpdateUi?.Invoke(Simulation);
            _eventsInCalendar = Simulation.Calendar.GetSortedEvents();
            _simTime = TimeHandler.ToReadableDateTime(Simulation.CurrentSimTime);
            InvokeAsync(StateHasChanged);
        }
    }

    void ISimDelegate.UpdateUi(SimCore simCore, Event currentEvent)
    {
        _simTime = TimeHandler.ToReadableDateTime(simCore.CurrentSimTime);
        UpdateUi?.Invoke(simCore);
        _eventsInCalendar = simCore.Calendar.GetSortedEvents();
        _statistics = simCore.Statistics;

        if (currentEvent is not SysEvent)
        {
            if (_logsCollection.Count >= Config.MaxLogCount)
            {
                _logsCollection.RemoveAt(0);
            }

            _logsCollection.Add(currentEvent.ToString());
        }

        InvokeAsync(StateHasChanged);
    }

    async Task RunSimulationImpl()
    {
        _logsCollection.Clear();
        InitializeSimulation!();
        await Simulation.RunOneSimulation();
        await InvokeAsync(StateHasChanged);
    }

    private void FinishSimulation()
    {
        Simulation.FinishSimulation();
        StateHasChanged();
    }

    private bool CouldNotBeFinished()
    {
        return !Simulation.IsRunning;
    }

}