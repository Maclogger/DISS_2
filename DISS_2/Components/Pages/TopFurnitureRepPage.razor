@page "/TopFurnitureRepPage"
@using DISS_2.BackEnd
@using DISS_2.BackEnd.Core
@using DISS_2.BackEnd.Statistics
@using DISS_2.BackEnd.TopFurniture
@using DISS_2.Components.Basic.Simulation
@using DISS_2.Components.Basic.Chart
@*
@using DISS_2.Components.Basic.Chart
*@
@implements DISS_2.BackEnd.Core.IRepDelegate
@rendermode InteractiveServer
<div class="card rounded-3 bg-dark text-white p-4 w-100">
    <div class="container-fluid">
        <div class="row">
            <h1 class="m-0 p-0">Top Furniture, LCC - Replications</h1>
        </div>
        <div class="row mt-4">
            <div class="col-md-3 p-0">
                <div class="d-flex justify-content-between flex-column p-2 bg-white text-black rounded-3 h-100">
                    <div class="card rounded-3 bg-primary text-white d-flex
                                align-items-center justify-content-center text-center">
                        <h3 class="m-0 p-0 py-4">Replications Setup</h3>
                    </div>

                    <div>
                        <div class="d-flex align-items-center mt-3">
                            <label class="card bg-primary text-white me-2 fs-4 text-center" style="min-width: 3rem;">A</label>
                            <input @bind="A" class="form-control flex-grow-1" type="number" min="1" step="1"
                                   disabled="@IsRunning()"/>
                        </div>
                        <div class="d-flex align-items-center mt-3">
                            <label class="card bg-primary text-white me-2 fs-4 text-center" style="min-width: 3rem;">B</label>
                            <input @bind="B" class="form-control flex-grow-1" type="number" min="1" step="1"
                                   disabled="@IsRunning()"/>
                        </div>
                        <div class="d-flex align-items-center mt-3">
                            <label class="card bg-primary text-white me-2 fs-4 text-center" style="min-width: 3rem;">C</label>
                            <input @bind="C" class="form-control flex-grow-1" type="number" min="1" step="1"
                                   disabled="@IsRunning()"/>
                        </div>
                    </div>

                    <div class="d-flex align-items-center gap-3">
                        <label class="card bg-primary text-white fs-4 py-2 text-center w-100" style="width: 500px;">
                            Replication Count
                        </label>
                        <input class="form-control w-100 h-100" type="number" @bind="_replicationCount"
                               min="1" step="10" disabled="@IsRunning()"/>
                    </div>

                    <div class="d-flex flex-row gap-3 mt-3">
                        <button @onclick="Run" class="btn btn-primary w-100 fs-3"
                                style="aspect-ratio: 2/1;" disabled="@IsRunning()">Run
                        </button>
                        <button @onclick="Stop" class="btn btn-danger w-100 fs-3"
                                style="aspect-ratio: 2/1;" disabled="@IsNotRunning()">Stop
                        </button>
                    </div>
                    <div class="card rounded-3 bg-white mt-3 p-2">
                        <p class="fs-4 m-0 p-0 ps-2">Current Replication:</p>
                        <span class="badge bg-primary mx-2 fs-3 py-3 px-1 mt-1 mb-1">@_currentReplication / @_replicationCount</span>
                        <p class="fs-4 m-0 p-0 ps-2 mt-2">Average time of Order in system:</p>
                        <span class="badge bg-primary mx-2 fs-3 py-3 px-1 mt-1 mb-1">@GetFormattedAvgTimeOfOrderInSystem()</span>
                    </div>
                </div>
            </div>
            <div class="col-md-9 p-0 ps-4">
                <div class="container-fluid">
                    <div class="row">
                        <RealTimeChart @ref="_chart" Title="Average time of Order in system" XAxisLabel="Replication" YAxisLabel="Time"/>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-4">
            <StatisticsComp Statistics="_statistics"/>
        </div>
    </div>
</div>

@code {

    RealTimeChart _chart = new();
    public TopFurnitureSimulation Sim { get; set; } = MainApp.Instance.TopFurnitureRepSimulation ?? new();
    private int _replicationCount = 1_000;
    private int _currentReplication = 0;
    private List<Statistics> _statistics = new();
    public int A { get; set; } = 2;
    public int B { get; set; } = 2;
    public int C { get; set; } = 18;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (MainApp.Instance.TopFurnitureRepSimulation == null)
            {
                MainApp.Instance.TopFurnitureRepSimulation = Sim;
            }
            else
            {
                Sim = MainApp.Instance.TopFurnitureRepSimulation;
            }

            Sim.RepDelegates.Add(this);
            await UpdateUi(Sim);
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool IsRunning()
    {
        return Sim.IsRunning;
    }

    private bool IsNotRunning()
    {
        return !IsRunning();
    }

    public async Task Run()
    {
        foreach (Statistics statistic in Sim.RepStatistics)
        {
            statistic.Clear();
        }

        Sim.Reinitialize(A, B, C, Config.DayCount);
        await _chart.Reset();
        await Sim.RunSimulation(_replicationCount);
    }

    private void Stop()
    {
        Sim.IsRepsRunning = false;
        Sim.IsRunning = false;
    }

    public async Task UpdateUi(SimCore simCore)
    {
        TopFurnitureSimulation sim = (TopFurnitureSimulation)simCore;
        Sim = sim;
        _currentReplication = Sim.CurrReplication + 1;
        if (Sim.IsRunning)
        {
            _replicationCount = Sim.ReplicationCount;
        }

        _statistics = simCore.RepStatistics;

        await InvokeAsync(StateHasChanged);

        bool shouldBePrintedToChart = IsNth() && !IsInCutOff();
        if (shouldBePrintedToChart)
        {
            double lower = _statistics[11].CalcLowerIS();
            double value = _statistics[11].CalcMean();
            double upper = _statistics[11].CalcUpperIS();

            await _chart.AddValue(lower, value, upper);
        }
    }

    private bool IsInCutOff()
    {
        return _currentReplication <= 0.02 * _replicationCount;
    }

    private bool IsNth()
    {
        double interval = (double)_replicationCount / 500;
        return _currentReplication % Math.Max(1, 2) < 1;
    }

    private string GetFormattedAvgTimeOfOrderInSystem()
    {
        if (_statistics.Count < 12) return "";
        Statistics statistic = _statistics[11];
        double mean = statistic.CalcMean();
        string solution = TimeHandler.ToReadableTime(mean);
        solution += $" ({mean.ToString(Config.StatisticFloatFormat)})";
        return solution;
    }

}