@page "/TopFurniturePage"
@using DISS_2.BackEnd
@using DISS_2.BackEnd.Core
@using DISS_2.BackEnd.TopFurniture
@using DISS_2.Components.Basic.Simulation
@rendermode InteractiveServer

@if (MainApp.Instance.TopFurnitureSimulation != null)
{
    <SimulationComp
        Headline="Top Furniture, LCC"
        UpdateUi="UpdateUi"
        Simulation="MainApp.Instance.TopFurnitureSimulation" InitializeSimulation="ResetSimulation">

        <div class="container-fluid">
            <div class="row">
                <div class="col-3 d-flex justify-content-between flex-column p-0 gap-2">
                    <div class="d-flex align-items-center">
                        <label class="card bg-primary text-white me-2 fs-4 text-center" style="width: 8rem;">A</label>
                        <input @bind="A" class="form-control flex-grow-1" type="number" min="1" step="1"
                               disabled="@MainApp.Instance.TopFurnitureSimulation.IsRunning"/>
                    </div>
                    <div class="d-flex align-items-center">
                        <label class="card bg-primary text-white me-2 fs-4 text-center" style="width: 8rem;">B</label>
                        <input @bind="B" class="form-control flex-grow-1" type="number" min="1" step="1"
                               disabled="@MainApp.Instance.TopFurnitureSimulation.IsRunning"/>
                    </div>
                    <div class="d-flex align-items-center">
                        <label class="card bg-primary text-white me-2 fs-4 text-center" style="width: 8rem;">C</label>
                        <input @bind="C" class="form-control flex-grow-1" type="number" min="1" step="1"
                               disabled="@MainApp.Instance.TopFurnitureSimulation.IsRunning"/>
                    </div>
                    <div class="d-flex align-items-center">
                        <label class="card bg-primary text-white me-2 fs-4 text-center" style="width: 8rem;">Days</label>
                        <input @bind="Days" class="form-control flex-grow-1" type="number" min="1" step="1"
                               disabled="@MainApp.Instance.TopFurnitureSimulation.IsRunning"/>
                    </div>
                </div>

                <div class="col-9 p-0">
                    <div class="card bg-dark d-flex flex-row gap-4 text-center align-items-center p-4  ms-4">
                        <div class="card bg-white flex-grow-1 d-flex justify-content-center align-items-center"
                             style="aspect-ratio: 1/1; width: 20%;">
                            <div>
                                <p class="m-0 mb-2 " style="font-size: 1vw;">Chairs</p>
                                <h3>@_chairsInSystem</h3>
                            </div>
                        </div>
                        <div class="card flex-grow-1 d-flex justify-content-center align-items-center"
                             style="aspect-ratio: 1/1; width: 20%;">
                            <div>
                                <p class="m-0 mb-2 " style="font-size: 1vw;">Tables</p>
                                <h3>@_tablesInSystem</h3>
                            </div>
                        </div>
                        <div class="card flex-grow-1 d-flex justify-content-center align-items-center"
                             style="aspect-ratio: 1/1; width: 20%;">
                            <div>
                                <p class="m-0 mb-2 " style="font-size: 1vw;">Wardrobes</p>
                                <h3>@_wardrobesInSystem</h3>
                            </div>
                        </div>
                        <div class="card bg-white flex-grow-1 d-flex justify-content-center align-items-center"
                             style="aspect-ratio: 1/1; width: 20%;">
                            <div>
                                <p class="m-0 mb-2 " style="font-size: 1vw;">Sum</p>
                                <h3>@(_chairsInSystem + _tablesInSystem + _wardrobesInSystem)</h3>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <div class="card rounded-3  p-4 bg-light mt-4">
            <h3 class="card-title mb-3">Queues</h3>
            <div class="table-responsive">
                <table class="table table-bordered custom-rounded m-0">
                    <thead class="table-dark">
                    <tr>
                        <th>Order Type</th>
                        <th>Queue 1</th>
                        <th>Queue 2</th>
                        <th>Queue 3</th>
                        <th>Queue 4</th>
                    </tr>
                    </thead>
                    <tbody class="table-dark">
                    <tr>
                        <td class="fw-bold">Chair</td>
                        <td>@GetQueueCount(_queue1CountsByTypes, "Chair")</td>
                        <td>@GetQueueCount(_queue2CountsByTypes, "Chair")</td>
                        <td>@GetQueueCount(_queue3CountsByTypes, "Chair")</td>
                        <td>@GetQueueCount(_queue4CountsByTypes, "Chair")</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Table</td>
                        <td>@GetQueueCount(_queue1CountsByTypes, "Table")</td>
                        <td>@GetQueueCount(_queue2CountsByTypes, "Table")</td>
                        <td>@GetQueueCount(_queue3CountsByTypes, "Table")</td>
                        <td>@GetQueueCount(_queue4CountsByTypes, "Table")</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Wardrobe</td>
                        <td>@GetQueueCount(_queue1CountsByTypes, "Wardrobe")</td>
                        <td>@GetQueueCount(_queue2CountsByTypes, "Wardrobe")</td>
                        <td>@GetQueueCount(_queue3CountsByTypes, "Wardrobe")</td>
                        <td>@GetQueueCount(_queue4CountsByTypes, "Wardrobe")</td>
                    </tr>
                    </tbody>
                    <tfoot class="table-dark">
                    <tr>
                        <th>Total</th>
                        <th>@_queue1CountsByTypes.Values.Sum()</th>
                        <th>@_queue2CountsByTypes.Values.Sum()</th>
                        <th>@_queue3CountsByTypes.Values.Sum()</th>
                        <th>@_queue4CountsByTypes.Values.Sum()</th>
                    </tr>
                    </tfoot>
                </table>
            </div>
        </div>

        <div class="container-fluid mt-4">
            <div class="row">
                <div class="col-8 p-0">
                    <div class="card rounded-3 p-4 bg-light">
                        <h3 class="card-title mb-3">Workers</h3>
                        <div class="table-responsive">
                            <table class="table table-bordered custom-rounded m-0">
                                <thead class="table-dark">
                                <tr>
                                    <th>Worker Group</th>
                                    <th>Busy</th>
                                    <th>Available</th>
                                    <th>Total</th>
                                </tr>
                                </thead>
                                <tbody class="table-dark">
                                <tr>
                                    <td class="fw-bold">A</td>
                                    <td>@_aBusy</td>
                                    <td>@(A - _aBusy)</td>
                                    <td>@A</td>
                                </tr>
                                <tr>
                                    <td class="fw-bold">B</td>
                                    <td>@_bBusy</td>
                                    <td>@(B - _bBusy)</td>
                                    <td>@B</td>
                                </tr>
                                <tr>
                                    <td class="fw-bold">C</td>
                                    <td>@_cBusy</td>
                                    <td>@(C - _cBusy)</td>
                                    <td>@C</td>
                                </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="col-4 p-0 ps-4 d-flex flex-grow-1 flex-column">
                    <div class="card rounded-3 p-4 bg-light h-100">
                        <h3 class="card-title mb-3">Completed Orders</h3>
                        <div class="card rounded-3 bg-primary h-100 d-flex justify-content-center text-center">
                            <h1 class="text-white">@_completedOrders</h1>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </SimulationComp>
}

@code {
    public int A { get; set; } = 1;
    public int B { get; set; } = 1;
    public int C { get; set; } = 1;
    public int Days { get; set; } = 249;

    private Dictionary<string, int> _queue1CountsByTypes = new();
    private Dictionary<string, int> _queue2CountsByTypes = new();
    private Dictionary<string, int> _queue3CountsByTypes = new();
    private Dictionary<string, int> _queue4CountsByTypes = new();

    private int _chairsInSystem = 0;
    private int _tablesInSystem = 0;
    private int _wardrobesInSystem = 0;

    private int _aBusy = 0;
    private int _bBusy = 0;
    private int _cBusy = 0;
    private int _completedOrders = 0;

    protected override void OnInitialized()
    {
        if (MainApp.Instance.TopFurnitureSimulation == null)
        {
            MainApp.Instance.TopFurnitureSimulation = new TopFurnitureSimulation();
            ResetSimulation();
        }
    }

    private void UpdateUi(SimCore simCore)
    {
        TopFurnitureSimulation sim = (TopFurnitureSimulation)simCore;

        _queue1CountsByTypes = new(sim.Queues[1].TypeCounts);
        _queue2CountsByTypes = new(sim.Queues[2].TypeCounts);
        _queue3CountsByTypes = new(sim.Queues[3].TypeCounts);
        _queue4CountsByTypes = new(sim.Queues[4].TypeCounts);

        _chairsInSystem = sim.ChairsInSystem;
        _tablesInSystem = sim.TablesInSystem;
        _wardrobesInSystem = sim.WardrobesInSystem;

        _aBusy = sim.BusyA;
        _bBusy = sim.BusyB;
        _cBusy = sim.BusyC;

        _completedOrders = sim.CompletedOrders;

        InvokeAsync(StateHasChanged);
    }

    private void ResetSimulation()
    {
        MainApp.Instance.TopFurnitureSimulation!.Reinitialize(A, B, C, Days);
        UpdateUi(MainApp.Instance.TopFurnitureSimulation);
    }

    private int GetQueueCount(Dictionary<string, int> queue, string itemType)
    {
        return queue.GetValueOrDefault(itemType, 0);
    }

}