@page "/TopFurniturePage"
@using DISS_2.BackEnd
@using DISS_2.BackEnd.Core
@using DISS_2.BackEnd.TopFurniture
@using DISS_2.Components.Basic.Simulation
@rendermode InteractiveServer

@if (MainApp.Instance.TopFurnitureSimulation != null)
{
    <SimulationComp
        Headline="Top Furniture, LCC"
        UpdateUi="UpdateUi"
        Simulation="MainApp.Instance.TopFurnitureSimulation" InitializeSimulation="ResetSimulation">

        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center">
                <label class="card bg-primary text-white me-2 fs-4 text-center" style="width: 2.5rem;">A</label>
                <input @bind="A" class="form-control flex-grow-1" type="number" min="1" step="1"
                       disabled="@MainApp.Instance.TopFurnitureSimulation.IsRunning"/>
            </div>
            <div class="d-flex align-items-center">
                <label class="card bg-primary text-white mx-2 fs-4 text-center" style="width: 2.5rem;">B</label>
                <input @bind="B" class="form-control flex-grow-1" type="number" min="1" step="1"
                       disabled="@MainApp.Instance.TopFurnitureSimulation.IsRunning"/>
            </div>
            <div class="d-flex align-items-center">
                <label class="card bg-primary text-white mx-2 fs-4 text-center" style="width: 2.5rem;">C</label>
                <input @bind="C" class="form-control flex-grow-1" type="number" min="1" step="1"
                       disabled="@MainApp.Instance.TopFurnitureSimulation.IsRunning"/>
            </div>
        </div>


        <div class="card rounded-3 bg-white">
            <p>Chairs in system: @_chairsInSystem</p>
            <p>Tables in system: @_tablesInSystem</p>
            <p>Wardrobes in system: @_wardrobesInSystem</p>
        </div>


        <div class="card rounded-3 m-2 p-3 bg-light">
            <h5 class="card-title mb-3">Queues</h5>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="table-primary">
                    <tr>
                        <th>Item Type</th>
                        <th>Queue 1</th>
                        <th>Queue 2</th>
                        <th>Queue 3</th>
                        <th>Queue 4</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td class="fw-bold">Chair</td>
                        <td>@GetQueueCount(_queue1CountsByTypes, "Chair")</td>
                        <td>@GetQueueCount(_queue2CountsByTypes, "Chair")</td>
                        <td>@GetQueueCount(_queue3CountsByTypes, "Chair")</td>
                        <td>@GetQueueCount(_queue4CountsByTypes, "Chair")</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Table</td>
                        <td>@GetQueueCount(_queue1CountsByTypes, "Table")</td>
                        <td>@GetQueueCount(_queue2CountsByTypes, "Table")</td>
                        <td>@GetQueueCount(_queue3CountsByTypes, "Table")</td>
                        <td>@GetQueueCount(_queue4CountsByTypes, "Table")</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Wardrobe</td>
                        <td>@GetQueueCount(_queue1CountsByTypes, "Wardrobe")</td>
                        <td>@GetQueueCount(_queue2CountsByTypes, "Wardrobe")</td>
                        <td>@GetQueueCount(_queue3CountsByTypes, "Wardrobe")</td>
                        <td>@GetQueueCount(_queue4CountsByTypes, "Wardrobe")</td>
                    </tr>
                    </tbody>
                    <tfoot class="table-secondary">
                    <tr>
                        <th>Total</th>
                        <th>@_queue1CountsByTypes.Values.Sum()</th>
                        <th>@_queue2CountsByTypes.Values.Sum()</th>
                        <th>@_queue3CountsByTypes.Values.Sum()</th>
                        <th>@_queue4CountsByTypes.Values.Sum()</th>
                    </tr>
                    </tfoot>
                </table>
            </div>
        </div>

    </SimulationComp>
}

@code {
    public int A { get; set; } = 1;
    public int B { get; set; } = 1;
    public int C { get; set; } = 1;

    private Dictionary<string, int> _queue1CountsByTypes = new();
    private Dictionary<string, int> _queue2CountsByTypes = new();
    private Dictionary<string, int> _queue3CountsByTypes = new();
    private Dictionary<string, int> _queue4CountsByTypes = new();

    private int _chairsInSystem = 0;
    private int _tablesInSystem = 0;
    private int _wardrobesInSystem = 0;

    protected override void OnInitialized()
    {
        if (MainApp.Instance.TopFurnitureSimulation == null)
        {
            MainApp.Instance.TopFurnitureSimulation = new TopFurnitureSimulation();
            ResetSimulation();
        }
    }

    private void UpdateUi(SimCore simCore)
    {
        TopFurnitureSimulation sim = (TopFurnitureSimulation)simCore;

        _queue1CountsByTypes = sim.Queues[1].TypeCounts;
        _queue2CountsByTypes = sim.Queues[2].TypeCounts;
        _queue3CountsByTypes = sim.Queues[3].TypeCounts;
        _queue4CountsByTypes = sim.Queues[4].TypeCounts;

        _chairsInSystem = sim.ChairsInSystem;
        _tablesInSystem = sim.TablesInSystem;
        _wardrobesInSystem = sim.WardrobesInSystem;

        InvokeAsync(StateHasChanged);
    }

    private void ResetSimulation()
    {
        MainApp.Instance.TopFurnitureSimulation!.Reinitialize(A, B, C);
        UpdateUi(MainApp.Instance.TopFurnitureSimulation);
    }

    private int GetQueueCount(Dictionary<string, int> queue, string itemType)
    {
        return queue.GetValueOrDefault(itemType, 0);
    }

}